#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–º—ë–Ω –¥—Ä–æ–Ω–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –¥—Ä–æ–Ω–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'drone'))

from stage2 import drone_name_to_short, short_to_drone_name


def test_message_length():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥—Ä–æ–Ω–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 50)
    
    test_drones = ['drone6', 'drone16', 'drone123', 'drone999']
    
    for drone_name in test_drones:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            't': 'a',  # type: assign
            'to': drone_name_to_short(drone_name),
            'c': 1,     # cell
            'i': 'D',   # item
            'x': -0.25,
            'y': -1.25, 
            'z': 1.2,
            'r': 0,     # color red
            'g': 180,   # color green
            'b': 255,   # color blue
            'msg_id': 'test'
        }
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
        json_str = json.dumps(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        length = len(json_str)
        status = "‚úÖ –û–ö" if length <= 125 else "‚ùå –ü–†–ï–í–´–®–ï–ù–ò–ï"
        
        print(f"{drone_name:>10} -> {drone_name_to_short(drone_name):>6} | {length:>3} —Å–∏–º–≤–æ–ª–æ–≤ | {status}")
    
    print(f"\n–õ–∏–º–∏—Ç: 125 —Å–∏–º–≤–æ–ª–æ–≤")


def test_name_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–º—ë–Ω —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–º—ë–Ω")
    print("=" * 50)
    
    test_cases = [
        'drone6',
        'drone19', 
        'drone123',
        'drone999',
        'leader',    # –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å drone
        'custom_name'
    ]
    
    print(f"{'–û—Ä–∏–≥–∏–Ω–∞–ª':>12} -> {'–°–æ–∫—Ä–∞—â.':>8} -> {'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª.':>12} | {'–°—Ç–∞—Ç—É—Å':>8}")
    print("-" * 50)
    
    for original in test_cases:
        short = drone_name_to_short(original)
        restored = short_to_drone_name(short)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –∏–º—ë–Ω –¥—Ä–æ–Ω–æ–≤
        if original.startswith('drone'):
            status = "‚úÖ –û–ö" if restored == original else "‚ùå –û–®–ò–ë–ö–ê"
        else:
            status = "‚ûñ N/A"  # –¥–ª—è –Ω–µ-–¥—Ä–æ–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
            
        print(f"{original:>12} -> {short:>8} -> {restored:>12} | {status:>8}")


def test_communication_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏–¥–µ—Ä–∞ –∫ —Ñ–æ–ª–æ–≤–µ—Ä—É
    leader_name = "drone7"
    follower_name = "drone123"
    
    # –õ–∏–¥–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    assignment = {
        't': 'a',
        'to': drone_name_to_short(follower_name),  # —Å–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è
        'c': 5,
        'i': 'S',
        'x': 1.25,
        'y': 0.75,
        'z': 1.2,
        'r': 210,
        'g': 105,
        'b': 30,
        'msg_id': 'abc1'
    }
    
    message_json = json.dumps(assignment)
    print(f"üì§ –õ–∏–¥–µ—Ä {leader_name} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:")
    print(f"   –î–ª–∏–Ω–∞: {len(message_json)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message_json}")
    
    # –§–æ–ª–æ–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    received_target = assignment['to']
    follower_short = drone_name_to_short(follower_name)
    
    print(f"\nüì• –§–æ–ª–æ–≤–µ—Ä {follower_name} –ø–æ–ª—É—á–∞–µ—Ç:")
    print(f"   Target –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{received_target}'")
    print(f"   –ú–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π ID: '{follower_short}'")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è: {'‚úÖ –î–ê' if received_target == follower_short else '‚ùå –ù–ï–¢'}")


if __name__ == "__main__":
    test_message_length()
    test_name_conversion() 
    test_communication_scenario()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üí° –°–∏—Å—Ç–µ–º–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–º—ë–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–Ω–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –¥–æ drone99999")
