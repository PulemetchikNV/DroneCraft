#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR-–∫–æ–¥–æ–≤ –¥–ª—è 3 –¥—Ä–æ–Ω–æ–≤
–§–æ—Ä–º–∞—Ç: [recipe_id][qr_position][items]
–ü—Ä–∏–º–µ—Ä: 37DDS - Recipe 3, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 7, –±–ª–æ–∫–∏ D,D,S
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –¥—Ä–æ–Ω–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'drone'))

from stage2 import parse_recipe_code, get_simple_grid_coordinates, grid_index_to_row_col


def test_qr_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–æ–≤ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR-–∫–æ–¥–æ–≤")
    print("=" * 50)
    
    test_codes = [
        '37DDS',  # Recipe 3, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 7, –±–ª–æ–∫–∏ D,D,S
        '25SDD',  # Recipe 2, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 5, –±–ª–æ–∫–∏ S,D,D  
        '18DSD',  # Recipe 1, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 8, –±–ª–æ–∫–∏ D,S,D
        '04SSS',  # Recipe 0, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 4, –±–ª–æ–∫–∏ S,S,S
        '61DDD',  # Recipe 6, QR –≤ –ø–æ–∑–∏—Ü–∏–∏ 1, –±–ª–æ–∫–∏ D,D,D
    ]
    
    for code in test_codes:
        try:
            recipe_id, qr_pos, items = parse_recipe_code(code)
            qr_row, qr_col = grid_index_to_row_col(qr_pos)
            print(f"‚úÖ {code}: Recipe {recipe_id}, QR at ({qr_row},{qr_col}), Items: {items}")
        except Exception as e:
            print(f"‚ùå {code}: ERROR - {e}")


def test_grid_positions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–µ—Ç–∫–∏ –æ—Ç (0,0) —Å –æ—Ç—Å—Ç—É–ø–æ–º 1 –º–µ—Ç—Ä"""
    print("\nüìê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 50)
    
    positions = get_simple_grid_coordinates()
    
    print("–ü–æ–∑–∏—Ü–∏–∏ –¥—Ä–æ–Ω–æ–≤ (–∏–Ω–¥–µ–∫—Å -> –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã):")
    for i in range(9):
        pos = positions[i]
        row, col = grid_index_to_row_col(i)
        print(f"  Position {i} (row {row}, col {col}): ({pos['x']:.1f}, {pos['y']:.1f})")


def test_assignment_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä–æ–Ω–æ–≤"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π QR-–∫–æ–¥
    qr_code = "37DDS"
    recipe_id, qr_pos, items = parse_recipe_code(qr_code)
    
    print(f"QR –∫–æ–¥: {qr_code}")
    print(f"Recipe ID: {recipe_id}")
    print(f"QR –ø–æ–∑–∏—Ü–∏—è: {qr_pos}")
    print(f"–ë–ª–æ–∫–∏ –¥–ª—è –¥—Ä–æ–Ω–æ–≤: {items}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–∫—É –ø–æ–∑–∏—Ü–∏–π
    positions = get_simple_grid_coordinates()
    qr_coords = positions[qr_pos]
    qr_row, qr_col = grid_index_to_row_col(qr_pos)
    
    print(f"QR –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ {qr_pos} (row {qr_row}, col {qr_col}): ({qr_coords['x']:.1f}, {qr_coords['y']:.1f})")
    print()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥—Ä–æ–Ω–æ–≤
    drones = ['drone7', 'drone6', 'drone19']  # –õ–∏–¥–µ—Ä + 2 —Ñ–æ–ª–æ–≤–µ—Ä–∞
    used_positions = {qr_pos}  # QR –ø–æ–∑–∏—Ü–∏—è –∑–∞–Ω—è—Ç–∞
    
    print("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥—Ä–æ–Ω–æ–≤:")
    for i, item in enumerate(items):
        if i < len(drones):
            drone_name = drones[i]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            pos_idx = None
            for p in range(9):
                if p not in used_positions:
                    pos_idx = p
                    used_positions.add(p)
                    break
            
            if pos_idx is not None:
                target_pos = positions[pos_idx]
                target_row, target_col = grid_index_to_row_col(pos_idx)
                print(f"  {drone_name}: –±–ª–æ–∫ '{item}' -> –ø–æ–∑–∏—Ü–∏—è {pos_idx} (row {target_row}, col {target_col}) ({target_pos['x']:.1f}, {target_pos['y']:.1f})")
            else:
                print(f"  {drone_name}: –±–ª–æ–∫ '{item}' -> –ù–ï–¢ –°–í–û–ë–û–î–ù–´–• –ü–û–ó–ò–¶–ò–ô!")
        else:
            print(f"  –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–†–û–ù–û–í –¥–ª—è –±–ª–æ–∫–∞ '{item}'")


def test_grid_layout():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ç–∫–∏"""
    print("\nüó∫Ô∏è  –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏ 3x3")
    print("=" * 50)
    
    positions = get_simple_grid_coordinates()
    
    print("–°–µ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π (–∏–Ω–¥–µ–∫—Å: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã):")
    print()
    
    for row in range(3):
        line = ""
        for col in range(3):
            idx = row * 3 + col
            pos = positions[idx]
            line += f"{idx}:({pos['x']:.0f},{pos['y']:.0f})  "
        print(f"  {line}")
    
    print()
    print("–ü—Ä–∏–º–µ—Ä –¥–ª—è QR –∫–æ–¥–∞ '37DDS':")
    print("  - QR –∫–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏–∏ 7 (2,1): (1,2)")  
    print("  - –î—Ä–æ–Ω—ã —Å –±–ª–æ–∫–∞–º–∏ D,D,S –∑–∞–π–º—É—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏")


if __name__ == "__main__":
    test_qr_parsing()
    test_grid_positions()
    test_assignment_scenario()
    test_grid_layout()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üí° –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ç–∫–æ–π –æ—Ç (0,0) —Å —à–∞–≥–æ–º 1 –º–µ—Ç—Ä")
